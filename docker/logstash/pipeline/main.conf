input {
  beats {
    port => 5044
  }
  
  tcp {
    port => 5045
    codec => json
  }

  # Para SQL Server, si usas JDBC
  jdbc {
    jdbc_connection_string => "jdbc:sqlserver://your_sql_server:1433;databaseName=YourDB"
    jdbc_user => "usuario"
    jdbc_password => "contraseña"
    jdbc_driver_library => "/usr/share/logstash/logstash-core/lib/jars/mssql-jdbc.jar"
    jdbc_driver_class => "com.microsoft.sqlserver.jdbc.SQLServerDriver"
    statement => "SELECT TOP 1000 * FROM sys.dm_exec_requests WHERE session_id > 50"
    schedule => "*/5 * * * *"
    tags => ["sqlserver"]
  }
}

filter {
  if [tags] == "sqlserver" {
    # Procesamiento específico para datos SQL Server
    mutate {
      add_field => { "source_type" => "sqlserver" }
    }
  }
  
  # Detección de errores comunes en aplicaciones financieras
  if [message] =~ "(?i)exception|error|failed|timeout|denied" {
    mutate {
      add_tag => ["error_detected"]
    }
    
    if [message] =~ "(?i)credit|payment|transfer|account" {
      mutate {
        add_tag => ["financial_error"]
      }
    }
  }
  
  # Normalización de timestamps
  date {
    match => [ "timestamp", "ISO8601", "yyyy-MM-dd HH:mm:ss,SSS", "yyyy-MM-dd HH:mm:ss.SSS" ]
    target => "@timestamp"
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    user => "elastic"
    password => "contraseñacompleja123"
    index => "%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM.dd}"
    
    # Para detección de errores, usa un índice separado
    if "error_detected" in [tags] {
      index => "errors-%{+YYYY.MM.dd}"
    }
    
    # Para datos de SQL Server, usa un índice específico
    if "sqlserver" in [tags] {
      index => "sqlserver-metrics-%{+YYYY.MM.dd}"
    }
  }
}